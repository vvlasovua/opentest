<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Employee;
use App\Models\Position;
use Illuminate\Http\Request;
use App\DataTables\EmployeeDataTable;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Intervention\Image\Facades\Image;

class EmployeeController extends Controller
{
    //

    public function index(EmployeeDataTable $dataTable){
        return $dataTable->render('vendor.adminlte.employee');
    }

    public function get_employee_by_id($id){

        $employee = Employee::with('position', 'parent')
            ->where('id', '=', $id)->get()->toArray();
        $employee[0]['photo'];

        if(file_exists(storage_path('app/public/images/employee/'.$employee[0]['photo']))){
            $photo = asset('/storage/images/employee/'.$employee[0]['photo']);
            $employee[0]['photo'] = $photo;
        }

        $position = Position::all()->toArray();

        $result = array('employee' => $employee[0], 'position' => $position);

        if (view()->exists('vendor.adminlte.employee.edit')) {
            return view('vendor.adminlte.employee.edit', $result);
        }
        abort(404);
    }

    public function update_employee_by_id(Request $request){

        $this->validate($request, [
            'name' => 'required|string|min:2|max:255',
            'email' => 'required|email|max:255|string',
            'phone' => 'required|min:11',
            'salary' => 'required|numeric|min:0|max:500000.00',
            'position' => 'required|integer',
            'date_employment' => 'required|date_format:Y-m-d',
            'parent_id' => 'required|integer',
            'photo' => 'mimes:jpeg,png|max:5000|dimensions:min_width=300,min_width=300',
        ]);

        $employee = Employee::find($request->id);
        $user = Auth::user();

        $employee->name = $request->name;
        $employee->email = $request->email;
        $employee->phone = $request->phone;
        $employee->salary = $request->salary;
        $employee->position_id = $request->position;
        $employee->date_employment = $request->date_employment;
        $employee->employee_parent_id = $request->parent_id;

        $employee->admin_updated_id = $user->id;

        if( $request->hasFile('photo')){
            $photo = $request->file('photo');
            $photo_name = time().'_'.$photo->getClientOriginalName();

            $img = Image::make($photo);
            $img->resizeCanvas(300, 300, 'center', false, 'ffffff');

            if (!file_exists(storage_path('app/public/images/employee/'))) {
                mkdir(storage_path('app/public/images/employee/'), 0777, true);
            }
            $target = storage_path('app/public/images/employee/'.$photo_name);
            $img->save($target);

            $employee->photo = $photo_name;
        }

        if ($employee->save()) {
            return redirect()->route('admin.employee');
        }else{
            return back()->withErrors(['Ошибка сохранения данных!'])->withInput($request->all());
        }
    }

    public function delete_employee(Request $request){
        $position = Employee::find($request->id);
        if ($position->delete()) {
            return response()->json(['code' => 200, 'mess' => 'Poof! Your imaginary position has been deleted!']);
            //return redirect()->route('admin.employee');
        }
    }

    public function autocomplete(Request $request){
        $query = $request->get('query');
        $data = Employee::select('name', 'id')->where("name",  "LIKE", "%".$query."%")->get();
        return response()->json($data);
    }
}
